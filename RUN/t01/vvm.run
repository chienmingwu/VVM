#!/bin/csh
# Script which compiles and calls the Fortran executable and 
# runs the simulation.
# This script is called by the batch script "btch_vvcm_cam".
#-------------------------------------------------------------------  

# The compilation to the gnumakefile system and will only
#  compile if code has been updated. If you are changing
#  compilation options 'make clobber' first.
# The format is make, compiler_option=true (if platform has more than
#  one compiler available) DEBUG=logical_value (default is false and
#  can be omitted if default is desired).
# Example: make INTEL=true DEBUG=true

set echo  # echoes the commands
set expname = t01
set subdir = ../../DATA/${expname}
set datadir = ../../RUNDATA
set codedir = CODE

make INTEL_COMP=true CASENAME=${expname} CODEDIR=${codedir} -f ../makefile 

setenv EXPHDR_tmp ${expname}" "${subdir}

#for restart ----------------------------------------
# setenv EXPHDR_INI1 ${subdir}"/GPTB02"
# setenv EXPHDR_INI2 ${subdir}"/GPTE01"
# For restart ----------------------------------------
#-------------------------------------------------------------------
cd ${subdir}

set file = ${subdir}/PARMSLD.f

set nx = `grep "nsbdm_x = " ${file} |sed 's/, .*$//g' |sed 's/^.*nsbdm_x = //g'`
set ny = `grep "nsbdm_y = " ${file} |sed 's/, .*$//g' |sed 's/^.*nsbdm_y = //g'`

sed -e 's/expname/'${expname}'/g' \
    -e 's/np_nodes/1/g' \
    -e 's/np_threads/4/g' \
    -e 's/total_cores/4/g' ../../RUN/run.sh > run.sh
#bsub < run.sh
qsub run.sh

exit

