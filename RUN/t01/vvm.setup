#!/bin/csh
# Setup file for RRTMG radiation runs. After executing this script,
# run the makefile.  The final step is to submit the batch job to
# Bassi, which calls the executable rrtm_*.run.
#--------------------------------------------------------------------- 

set echo  # echoes the commands
set expname = taiwanvvm_i_u3h

# set job system and compiler
set compiler = 'intel_mogamd'
set jobsys = 'slurm_mogamd'

# set paths
set vvmdir = ` pwd | rev | cut -c 9- | rev `
set datadir = ${vvmdir}'/DATA'
set rundir = ${vvmdir}'/RUN'
set expdir = ${datadir}'/'${expname}
set codedir = ${datadir}'/'${expname}'/CODE'

if( ! -d ${datadir} ) then      # if ${datadir} is not found, create it!
  mkdir ${datadir}                
endif

if( ! -d ${expdir} ) then      # if ${subdir} is not found, create it!
  mkdir ${expdir} 
  cd ${expdir}
else
  cd ${expdir}
  alias rm rm
  rm -rf *
endif

mkdir RUNDATA
mkdir archive

# prepare for compiling code
cd ${expdir}
if( ! -d ${codedir} ) then
  cp -r ${vvmdir}'/CODE' ${codedir}
else
  rm -rf ${codedir}
  cp -r ${vvmdir}'/CODE' ${codedir}
endif

if( ! -d ${expdir}'/compile_code' ) then
  mkdir ${expdir}'/compile_code'
endif

# prepare tables for model
cp ${rundir}/t01/vvm.setup .
cp ${vvmdir}/CODE/make_ctl.sh .

# for RRTMG
cp ${vvmdir}/RUNDATA/fort.91 fort.91
cp ${vvmdir}/RUNDATA/rrtmg_lw.nc RUNDATA/rrtmg_lw.nc
cp ${vvmdir}/RUNDATA/rrtmg_sw.nc RUNDATA/rrtmg_sw.nc

# for NOAH LSM
cp -r ${vvmdir}/RUNDATA/LSM RUNDATA/LSM
cp ${vvmdir}/CODE/LSM/GENPARM.TBL .
cp ${vvmdir}/CODE/LSM/SOILPARM.TBL .
cp ${vvmdir}/CODE/LSM/VEGPARM.TBL .

# for P3 scheme
cp ${vvmdir}/CODE/p3_lookup_table_* .

# create CPP list
cat > definesld.com << 'END1'
#define MPI
#define PERIODIC
#define PHYSICS
#define MICROCODE
#define MICROP3
#define DIFFUSION
#define TOPOGRAPHY
#define RADCODE         
#define LSM
'END1'
cat definesld.com

# Grid parameter declarations.
# changed from 'cat' to 'sed' - DD 2010.02.09
# added domain decomposition variables, without '#define MPI' must both
#  be 1, total subdomains/processes = product of decomposition variables
#  - DD 2010.04.12
sed -i 's/zonal_dimension/512/g' ${codedir}/cdecks/PARMSLD.F90 
sed -i 's/merid_dimension/512/g' ${codedir}/cdecks/PARMSLD.F90
sed -i 's/zonal_decomposition/8/g' ${codedir}/cdecks/PARMSLD.F90
sed -i 's/merid_decomposition/8/g' ${codedir}/cdecks/PARMSLD.F90
sed -i 's/vert_dimension/70/g' ${codedir}/cdecks/PARMSLD.F90
sed -i 's/tracer_dimension/0/g' ${codedir}/cdecks/PARMSLD.F90
sed -i 's/diag2d_dimension/0/g' ${codedir}/cdecks/PARMSLD.F90
sed -i 's/diag3d_dimension/0/g' ${codedir}/cdecks/PARMSLD.F90

# input data
cat > INPUT << 'END6'
 &INPUT1 NEWRUN=T, ITTADD=86400 /
 &INPUT2 RLAT=23.458, RLON=120.95 /
 &INPUT3 DX=2000.,DYNEW=2000.,DZ=500.,DZ1=100.,DT=1.,NOTURB=F,NOSFX=F,NSFLUX=12,ALADV=1.,UVTAU=3600. /
#           (m)          (m)     (m)     (m)    (s)                (time step)
 &INPUT4 NXS=1,NXSAVG=60,NWR11=1,NFLPRT=1,NRESTART=60/
#         ( case output frequency)   ( result could be seen in ncfile)
 &INPUT5 IX=3182073,ITINIT=10,ITSTOP=30,SCALE=6.,Q1Q2=F,DTRAD=12.,petsc_cr=0 /
#                                                              (s)
'END6'
cat INPUT
#-------------------------------------------------------------------

# clean previous compilation
cd ${expdir}'/compile_code'
make RUNDIR=${rundir} CASENAME=${expname} COMPILER=${compiler} -f ${rundir}/makefile clean

## make for topography
make RUNDIR=${rundir} CASENAME=${expname} CODEDIR=${codedir} EXPDIR=${expdir} COMPILER=${compiler} -f ${rundir}/makefile topography
cd ${expdir}
./nc2fortranBinary > topo.log

exit


